#!/bin/bash

#                  _
#                /   \
#               |  o  |
#                \   /
#         ________) (________
#        |                   |
#        '------.     .------'
#                |   |
#                |   |
#                |   |
#                |   |
#     /\         |   |         /\
#    /_ \        /   \        / _\
#      \ '.    .'     '.    .' /
#       \  '--'         '--'  /
#        '.                 .'
#          '._           _.'
#             `'-.   .-'`
#                 \ /
#                  `
# Defines the active versions of apps, plugins (etc) as environment variables that are
# later used by wrappers inside ucore. The variables get defined by the convention
# $UVER_<NAME>_VERSION. They are declared using json files which can be localized
# under the "../versions" folder (the json structure is basically an one dimension object).
# Any json file created under ../versions is going to be used automatically.

# getting current script folder
dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# avoiding to prepended to the system path for every single bash session by making
# sure bin is not included to the path yet.
uverBinPath+="$dir/bin"
if ! [ "$UVER_BIN_PATH" == "$uverBinPath" ]; then
  export UVER_BIN_PATH=$uverBinPath
  export PATH="$uverBinPath:$PATH"
fi

# setting UVER_VERSIONS_DIR:
# at deployment time the contents of src are moved to the root of the version. Lets
# detect this behaviour first, otherwise it should fallback to the current structure
# where versions folder is localized under the root.
versionsDir="$dir/versions"
if ! [ -d "$versionsDir" ]; then
  versionsDir="$( dirname $dir )/versions"
fi
export UVER_VERSIONS_DIR="$versionsDir"

# prepending uver module to the python path
uverLib="$dir/lib"
if [ -z "$PYTHONPATH" ]; then
  export PYTHONPATH="$uverLib"
else
  export PYTHONPATH="$uverLib:$PYTHONPATH"
fi

# sourcing scripts
# core versions (looping through the versions types apps, libraries... etc)
coreVersions="$UVER_VERSIONS_DIR"
localVersions="$UVER_LOCAL/versions"
if [ -d "$localVersions" ]; then
  localVersions=$localVersions
else
  localVersions=""
fi

# setting versions as environment variables
for coreVersionType in $coreVersions $localVersions; do
    while IFS='=' read -r name version || [[ -n "$name" ]];
    do
      # convention followed by UVER_<NAME>_VERSION=<VERSION>
      export "$name"=$version
    done < <(uvervars $coreVersionType)
done
